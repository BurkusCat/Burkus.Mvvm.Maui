using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Linq;
using System.Text;

namespace Burkus.Mvvm.Maui;

[Generator]
public class AppSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // register a syntax receiver that will process App class declarations
        context.RegisterForSyntaxNotifications(() => new AppReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not AppReceiver receiver)
            return;

        var semanticModel = context.Compilation.GetSemanticModel(receiver.AppClass.SyntaxTree);
        var isPartial = receiver.AppClass.Modifiers
                .Any(m => m.IsKind(SyntaxKind.PartialKeyword));

        // check if the App class is partial and inherits from Application
        var appSymbol = semanticModel.GetDeclaredSymbol(receiver.AppClass);
        if (appSymbol is null || !isPartial || !appSymbol.BaseType.Equals(semanticModel.Compilation.GetTypeByMetadataName("Microsoft.Maui.Controls.Application")))
        {
            throw new Exception("You must have a partial class called \"App\" that inherits from Application in your .NET MAUI project.");
        }

        // get the MAUI program we are running in

        var assembly = context.Compilation.Assembly;
        var mauiProgramName = $"{assembly.Name}.MauiProgram";
        var mauiProgram = context.Compilation
            .GetTypeByMetadataName(mauiProgramName);

        if (mauiProgram is null)
        {
            throw new Exception("You must have a class called \"MauiProgram\" in your .NET MAUI project.");
        }

        // generate the source code for the CreateWindow method
        var sourceBuilder = $@"// <auto-generated>
//     This code was generated by a tool. Burkus.Mvvm.Maui generated this.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace {mauiProgram.ContainingNamespace.ToDisplayString()};

public partial class App : Application
{{
    protected override Window CreateWindow(IActivationState? activationState)
    {{
        Current.MainPage = new NavigationPage();

        var burkusMvvmBuilder = ServiceResolver.Resolve<IBurkusMvvmBuilder>();
        var navigationService = ServiceResolver.Resolve<INavigationService>();
        var serviceProvider = ServiceResolver.GetServiceProvider();

        // perform the user's desired initialization logic
        if (burkusMvvmBuilder.onStartFunc != null)
        {{
            burkusMvvmBuilder.onStartFunc.Invoke(navigationService, serviceProvider);
        }}

        return base.CreateWindow(activationState);
    }}
}}";

        // add the generated source file to the compilation
        context.AddSource("App-BurkusMvvmApplication.g", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
    }
}

